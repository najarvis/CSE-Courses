import java.util.*;// Simplified to highlight iteratorspublic final class LinkedBag1<T> implements Iterable<T> {	private class Node {		private T data;		private Node next;		private Node(T dataPortion) {			this(dataPortion, null);		}		private Node(T dataPortion, Node nextNode) {			data = dataPortion;			next = nextNode;		}	}	public class LinkedBagIterator implements Iterator<T> {		private Node currNode;		public LinkedBagIterator() {			currNode = firstNode;		}		public boolean hasNext() {			return currNode != null;		}		public T next() {			T result = currNode.data;			currNode = currNode.next;			return result;		}		public void remove() {			throw new UnsupportedOperationException();		}	}	private Node firstNode; // Reference to first node	private int numberOfEntries;	public LinkedBag1() {		firstNode = null;		numberOfEntries = 0;	}	public boolean add(T newEntry) {		Node newNode = new Node(newEntry);		if (firstNode == null) {			firstNode = newNode;		} else {			Node currNode = firstNode;			while (currNode.next != null) {				currNode = currNode.next;			}			currNode.next = newNode;		}		numberOfEntries++;		return true;	}	public Iterator<T> iterator()	{		return new LinkedBagIterator();	}}