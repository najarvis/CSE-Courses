import java.util.EmptyStackException;/* * Answers to Written Questions: * 1. s | a b b *    t | d *     * 2. pile | Jane Jess Jill Jill Jill *    name = Jim *     * 3. tmp1 | *    tmp2 | *    names | 0 1 2 3 4 5 3 4 5 *     * 4. stack | 4 3 2 1 *    result = 24 *    display: "result = 24" *    This is the factorial operator (e.g. 4!) *//** * A class of stacks whose entries are stored in a chain of nodes. *  * @author Frank M. Carrano and Timothy M. Henry * @version 4.0 */public class LinkedStack<T> implements StackInterface<T> {	private Node topNode; // References the first node in the chain	public LinkedStack() {		topNode = null;	} // end default constructor	// < Implementations of the stack operations go here. >	// . . .	private class Node {		private T data; // Entry in stack		private Node next; // Link to next node		private Node(T dataPortion) {			this(dataPortion, null);		} // end constructor		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		} // end constructor		private T getData() {			return data;		} // end getData		private void setData(T newData) {			data = newData;		} // end setData		private Node getNextNode() {			return next;		} // end getNextNode		private void setNextNode(Node nextNode) {			next = nextNode;		} // end setNextNode	} // end Node	// The following are non-working stubs	 private void checkCapacity(int d) {	 }	 	 public void clear() {		 while (!isEmpty())			 pop();	 }	 public boolean isEmpty() {		 return (topNode == null);	 }	 public T peek() {		 if (isEmpty()) throw new EmptyStackException();		 return topNode.getData();	 }	 public void push(T newEntry) {		 Node n = new Node(newEntry);		 Node tmp = topNode;		 topNode = n;		 n.setNextNode(tmp);	 }	 public T pop() {		 if (isEmpty()) throw new EmptyStackException();		 T tmp = peek();		 topNode = topNode.next;		 return tmp;	 }} // end LinkedStack